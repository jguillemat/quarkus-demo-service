# configure databse
%prod.quarkus.hibernate-orm.database.generation=update
quarkus.hibernate-orm.log.format-sql=true
quarkus.hibernate-orm.log.sql=true
quarkus.datasource.db-kind=postgresql

%prod.quarkus.datasource.username=${user:wanja}
%prod.quarkus.datasource.password=${password:wanja}
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://${host:wanjaserver}/${dbname:wanjadb}

# configure container image
quarkus.container-image.image=quay.io/wpernath/${quarkus.application.name}:v${quarkus.application.version}
quarkus.container-image.username=<use -D to overwrite>
quarkus.container-image.password=<use -D to overwrite>
quarkus.container-image.additional-tags=latest

quarkus.native.container-build=true

# configure kubernetes extension
quarkus.kubernetes.replicas=1
quarkus.kubernetes.resources.requests.memory=256Mi
quarkus.kubernetes.resources.requests.cpu=50m
quarkus.kubernetes.env.secrets=demo-pguser-demo

# configure swagger ui
quarkus.swagger-ui.always-include=true

#
# WebSocket for incoming state updates of the client 
# in single player mode
# 
mp.messaging.incoming.incoming-hello.connector=quarkus-websocket
mp.messaging.incoming.incoming-hello.path=/socket
mp.messaging.incoming.incoming-hello.buffer-size=64

#
# Kafka broker
#
kafka.auto.offset.reset=earliest
mp.messaging.incoming.broker.connector=smallrye-kafka
mp.messaging.incoming.broker.topic=kafka
mp.messaging.incoming.broker.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.broker.value.serializer=org.apache.kafka.common.serialization.StringSerializer


# configure keycloak
%prod.quarkus.oidc.auth-server-url=http://localhost:63972/realms/quarkus
quarkus.oidc.client-id=demo-service
quarkus.oidc.credentials.secret=secrets
quarkus.oidc.tls.verification=none
quarkus.keycloak.policy-enforcer.enable=true


# Application props
app.message=Hey you!

