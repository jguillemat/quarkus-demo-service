app.message=Hello from Dev UI


%dev.quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.database.generation=update

quarkus.hibernate-orm.log.format-sql=true
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.sql-load-script=import.sql

quarkus.datasource.db-kind=postgresql

# Datasource settings... 
# note, we only set those props in prod mode
quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.username=${DB_USER:wanja}
%prod.quarkus.datasource.password=${DB_PASSWORD:wanja}
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://${DB_HOST:wanjaserver}/${DB_DATABASE:wanjadb}


# container-image
quarkus.container-image.builder=jib
quarkus.container-image.image=quay.io/wpernath/demo-service:v0.0.3
quarkus.container-image.push=false

#
# WebSocket for incoming state updates of the client 
# in single player mode
# 
mp.messaging.incoming.incoming-hello.connector=quarkus-websocket
mp.messaging.incoming.incoming-hello.path=/socket
mp.messaging.incoming.incoming-hello.buffer-size=64

#
# Kafka broker
#
kafka.auto.offset.reset=earliest
mp.messaging.incoming.broker.connector=smallrye-kafka
mp.messaging.incoming.broker.topic=kafka
mp.messaging.incoming.broker.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.broker.value.serializer=org.apache.kafka.common.serialization.StringSerializer


# OIDC
#%prod.quarkus.oidc.auth-server-url=http://localhost:63972/realms/quarkus
#quarkus.oidc.client-id=demo-service
#quarkus.oidc.credentials.secret=secrets
#quarkus.oidc.tls.verification=none
#quarkus.keycloak.policy-enforcer.enable=true

